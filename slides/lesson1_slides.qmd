---
title: "W1: Intro to Computing"
format: 
  revealjs:
    smaller: false
    scrollable: true
    echo: true
output-location: fragment
---

## Welcome!

## Introductions

-   Who am I?

. . .

-   What is DaSL?

. . .

-   Who are you?

    -   Name, pronouns, group you work in

    -   What you want to get out of the class

    -   Favorite fall activity

## Goals of the course

. . .

-   Fundamental concepts in programming languages: *How do programs run, and how do we solve problems effectively using functions and data structures?*

. . .

-   Data science fundamentals: *How do you translate your scientific question to a data wrangling problem and answer it?*

    ![Data science workflow](https://d33wubrfki0l68.cloudfront.net/571b056757d68e6df81a3e3853f54d3c76ad6efc/32d37/diagrams/data-science.png){width="550"}

## Culture of the course (1/3)

. . .

-   Challenge: We are learning on the job, but you already have a full-time job

. . .

-   *Teach not for mastery, but teach for empowerment to learn effectively.*

. . .

-   *You should understand the gist of the material with class time, but mastery takes practice and practice.*

## Culture of the course (2/3)

-   Challenge: We sometimes struggle with our data science in isolation, unaware that someone two doors down from us has gone through the same struggle.

. . .

-   *We learn and work better with our peers.*

. . .

-   *You might make a new friend, or two. ðŸ˜„*

## Culture of the course (3/3)

-   Challenge: We all have various personal goals and applications.

. . .

-   *Curate content during open community sessions and office hours based on your inputs.*

## Code of Conduct

. . .

-   **Be considerate** in speech and actions, and actively seek to acknowledge and respect the boundaries of other members.

. . .

-   **Be respectful -** Disagreements happen, but do not require poor behavior or poor manners. If someone asks you to stop, then stop.

. . .

-   **Refrain from demeaning, discriminatory, or harassing behavior and speech**.

. . .

The full CoC can be found [here](https://github.com/fhdsl/coc).

## Content of the course

1.  Intro to Computing

. . .

2.  Data structures

. . .

3.  Data wrangling 1

. . .

4.  Community Session 1 (optional)

. . .

5.  Data wrangling 2

. . .

6.  Data visualization

. . .

7.  Community Session 2 (optional)

. . .

8.  Putting it together: preview for code-a-thon (Tuesday Nov. 12)

. . .

9.  Code-a-thon: Friday Nov. 22

## Format of the course

. . .

-   Streamed online, recordings will be available.

. . .

-   1-2 hour exercises after each session are encouraged for practice.

. . .

-   Optional time to work on exercises together on Fridays 10am - 11am PT.

. . .

-   Online discussion via Slack.

## What is a computer program?

. . .

-   A sequence of instructions to manipulate data for the computer to execute.

. . .

-   A series of translations: English \<-\> Programming Code for Interpreter \<-\> Machine Code for Central Processing Unit (CPU)

. . .

We will focus on English \<-\> Programming Code for Python Interpreter in this class.

. . .

Another way of putting it: **How we organize ideas \<-\> Instructing a computer to do something**.

## Setting up Google Classroom and Colab and trying out your first analysis!

-   Google Classroom [invitation link](https://classroom.google.com/c/NzAyODI5NzU1NDU4?cjc=nq7lioy).

-   Classwork -\> Week 1 Classwork -\> `Week 1 Classwork.ipynb`

## Break

A pre-course survey:

https://forms.gle/zFZ3VB1QZ84Y8Uef6

## Grammar Structure 1: Evaluation of Expressions

. . .

-   **Expressions** are built out of **operations** or **functions**.

. . .

-   Functions and operations take in **data types**, do something with them, and **return** another data type.

. . .

-   We can combine multiple expressions together to form more complex expressions: an expression can have other expressions nested inside it.

## Examples

```{python}
18 + 21
```

. . .

```{python}
max(18, 21)
```

. . .

```{python}
max(18 + 21, 65)
```

. . .

```{python}
18 + (21 + 65)
```

. . .

```{python}
len("ATCG")
```

::: notes
If an expression is made out of multiple, nested operations, what is the proper way of the Python Console interpreting it? Being able to read nested operations and nested functions as a programmer is very important.
:::

## Function machine from algebra class

. . .

![](images/function_machine.png){alt="Function machine from algebra class."}

. . .

Operations are just functions. We could have written:

```{python}
from operator import add

add(18, 21)
```

. . .

```{python}
add(18, add(21, 65))
```

## Function machine from algebra class

![](images/function_machine.png){alt="Function machine from algebra class."}

-   A programmer should not need to know how the function or operation is implemented in order to use it - this emphasizes **abstraction** and **modular** thinking.

. . .

-   A function can have different kinds of inputs and outputs - it doesn't need to be numbers.

## Data types

| Data type name | **Data type shorthand** |      **Examples**       |
|----------------|:-----------------------:|:-----------------------:|
| Integer        |           int           |          2, 4           |
| Float          |          float          |      3.5, -34.1009      |
| String         |           str           | "hello", "234-234-8594" |
| Boolean        |          bool           |       True, False       |

## Grammar Structure 2: Storing data types in the environment

. . .

To build up a computer program, we need to store our returned data type from our expression somewhere for downstream use.

```{python}
x = 18 + 21
```

. . .

::: callout-tip
## Execution rule for variable assignment

Evaluate the expression to the right of `=`.

Bind variable to the left of `=` to the resulting value.

The variable is stored in the environment.
:::

::: notes
The environment is where all the variables are stored, and can be used for an expression anytime once it is defined. Only one unique variable name can be defined.

The variable is stored in the working memory of your computer, Random Access Memory (RAM). This is temporary memory storage on the computer that can be accessed quickly. Typically a personal computer has 8, 16, 32 Gigabytes of RAM. When we work with large datasets, if you assign a variable to a data type larger than the available RAM, it will not work. More on this later.
:::

## Downstream

Look, now `x` can be reused downstream:

```{python}
x - 2
```

. . .

```{python}
y = x * 2
y
```

. . .

What's the data type of a variable?

```{python}
type(y)
```

## Grammar Structure 3: Evaluation of Functions

A function has a **function name**, **arguments**, and **returns** a data type.

::: callout-tip
## Execution rule for functions:

A function's input arguments, when there's more than one, can be specified by:

-   The order the input given: `pow(2, 3)` is different than `pow(3, 2)`.

-   The name of the input argument: `pow(base=2, exp=3)`.

If the arguments contain expressions, evaluate those expressions first!
:::

## Examples

```{python}
pow(2, 3)
```

```{python}
pow(base=2, exp=3)
```

```{python}
pow(exp=3, base=2)
```

. . .

```{python}
max(len("hello"), 4)
```

## Learning a new function

1.  Function documentation

```         
?pow

pow(base, exp, mod=None)
Equivalent to base**exp with 2 arguments or base**exp % mod with 3 arguments
 
Some types, such as ints, are able to use a more efficient algorithm when
invoked using the three argument form.
```

. . .

2.  Documents page of a Python Module

[Base Python documentation of `pow`](https://docs.python.org/3/library/functions.html#pow)

. . .

3.  Forums vetted by experts, such as [SlackOverflow](https://stackoverflow.com/questions/tagged/pow+python)

## Tips on writing your first code

. . .

`Computer = powerful + stupid`

Even the smallest spelling and formatting changes will cause unexpected output and errors!

. . .

-   Write incrementally, test often

. . .

-   Check your assumptions, especially using new functions, operations, and new data types.

. . .

-   Live environments are great for testing, but not great for reproducibility.

. . .

-   **Ask for help!**
