---
title: "W1: Intro to Computing"
format: 
  revealjs:
    smaller: false
    scrollable: true
    echo: true
output-location: fragment
---

## Welcome!

## Introductions

-   Who am I?

. . .

-   What is DaSL?

. . .

-   Who are you?

    -   Name, pronouns, group you work in

    -   What you want to get out of the class

    -   Favorite fall activity

## Goals of the course

. . .

-   Fundamental concepts in programming languages: *How do programs run, and how do we solve problems effectively using functions and data structures?*

. . .

-   Data science fundamentals: *How do you translate your scientific question to a data wrangling problem and answer it?*

    ![Data science workflow](https://d33wubrfki0l68.cloudfront.net/571b056757d68e6df81a3e3853f54d3c76ad6efc/32d37/diagrams/data-science.png){width="550"}

## Culture of the course

. . .

-   Challenge: We are learning a new language, but you already have a full-time job

. . .

-   *Teach not for mastery, but teach for empowerment to learn effectively.*

## Culture of the course

-   Challenge: We sometimes struggle with our data science in isolation, unaware that someone two doors down from us has gone through the same struggle.

. . .

-   *We learn and work better with our peers.*

. . .

-   *Know that if you have a question, other people will have it.*

. . .

-   *Asking questions is our way of taking care of others.*

. . .

We ask you to follow [Participation Guidelines](https://hutchdatascience.org/communitystudios/guidelines/) and [Code of Conduct](https://github.com/fhdsl/coc).

## Content of the course

1.  Intro to Computing

2.  Data structures

3.  Data wrangling 1

4.  Community Session 1 (optional)

5.  Data wrangling 2

6.  Data visualization

7.  Community Session 2 (optional)

8.  Putting it together: preview for code-a-thon (Tuesday Nov. 12)

9.  Code-a-thon: Friday Nov. 22

## Format of the course

. . .

-   Hybrid, and recordings will be available.

. . .

-   1-2 hour exercises after each session are encouraged for practice.

. . .

-   Office Hours Fridays 10am - 11am PT.

. . .

-   Online discussion via Slack.

## Ready?

![](images/horst_community.png)

## What is a computer program?

. . .

-   A *sequence* of instructions to manipulate data for the computer to execute.

. . .

-   A series of translations: English \<-\> Programming Code for Interpreter \<-\> Machine Code

. . .

We will focus on English \<-\> Programming Code for Python Interpreter in this class.

## Setting up Google Classroom and Colab and trying out your first analysis!

-   Google Classroom [invitation link](https://classroom.google.com/c/NzAyODI5NzU1NDU4?cjc=nq7lioy).

-   Classwork -\> Week 1 Classwork -\> `Week 1 Classwork.ipynb`

## Break

A pre-course survey:

https://forms.gle/zFZ3VB1QZ84Y8Uef6

## Grammar Structure 1: Evaluation of Expressions

Consider the expression:

```{python}
min(2, 10)
```

. . .

-   **Expressions** are built out of **functions** or **operations**.

. . .

-   Functions and operations take in **data types** as inputs, do something with them, and **return** another data type as ouput.

. . .

-   If the function or operation input contains expressions, evaluate those expressions first.

## Examples

```{python}
18 + 21
```

. . .

```{python}
max(18, 21)
```

. . .

```{python}
max(18 + 21, 65)
```

. . .

```{python}
18 + (21 + 65)
```

. . .

```{python}
len("ATCG")
```

::: notes
If an expression is made out of multiple, nested operations, what is the proper way of the Python Console interpreting it? Being able to read nested operations and nested functions as a programmer is very important.
:::

## Function machine from algebra class

. . .

![](images/function_machine.png){alt="Function machine from algebra class."}

. . .

Operations are just functions. We could have written:

```{python}
from operator import add

add(18, 21)
```

. . .

```{python}
add(18, add(21, 65))
```

## Function machine from algebra class

![](images/function_machine.png){alt="Function machine from algebra class."}

-   A programmer should not need to know how the function or operation is implemented in order to use it.

. . .

-   A function can have different kinds of inputs and outputs - it doesn't need to be numbers.

## Data types

| Data type name | **Data type shorthand** |      **Examples**       |
|----------------|:-----------------------:|:-----------------------:|
| Integer        |           int           |          2, 4           |
| Float          |          float          |      3.5, -34.1009      |
| String         |           str           | "hello", "234-234-8594" |
| Boolean        |          bool           |       True, False       |

## Grammar Structure 2: Storing data types as variables in the environment

. . .

To build up a computer program, we need to store our returned data type from our expression somewhere for downstream use.

```{python}
age = 18 + 21
```

. . .

::: callout-tip
## Execution rule for variable assignment

Evaluate the expression to the right of `=`.

Bind variable to the left of `=` to the resulting value.

The variable is stored in the **environment**.
:::

::: notes
The environment is where all the variables are stored, and can be used for an expression anytime once it is defined. Only one unique variable name can be defined.

The variable is stored in the working memory of your computer, Random Access Memory (RAM). This is temporary memory storage on the computer that can be accessed quickly. Typically a personal computer has 8, 16, 32 Gigabytes of RAM. When we work with large datasets, if you assign a variable to a data type larger than the available RAM, it will not work. More on this later.
:::

## Downstream

Look, now `age` can be reused downstream:

```{python}
age - 2
```

. . .

```{python}
age_double = age * 2
age_double
```

. . .

What's the data type of a variable?

```{python}
type(age_double)
```

## More examples

-   `max(a, b, ...)` takes in at least two Integer or Float input arguments, and returns the highest value. You can give it more than two input arguments.

-   `pow(base, exp)` takes in two Integer input arguments, and returns the `base` raised to the `exp` power.

-   `dir()` takes in no input arguments, and returns all the variables in the environment as a list.

. . .

```{python}
max(len("hello"), pow(2, 3), 20)
```

. . .

```{python}
age = 35 - 5
score = max(age, pow(2, 3), 20)
```

. . .

```{python}
dir()
```

## Lists

**List** is a data structure that stores many elements of various data type, and the order its elements are stored matters. Each *element* of a List contains a single data type, or single data structure.

You can create a List via the bracket \`\[ \]\` operator:

```{python}
chrs = [2, 3, 2, 1, 2]
```

. . .

Then, you can access the elements of a list via its "index number", starting at 0.

```{python}
chrs[0]
```

. . .

```{python}
chrs[1]
```

## Tips on writing your first code

. . .

`Computer = powerful + stupid`

Even the smallest spelling and formatting changes will cause unexpected output and errors!

. . .

-   Write incrementally, test often

. . .

-   Check your assumptions, especially using new functions, operations, and new data types.

. . .

-   The sequence of instructions you give matters!

. . .

-   **Ask for help!**
