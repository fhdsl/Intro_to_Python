---
title: "W2: Working with Data Structures"
format: 
  revealjs:
    smaller: true
    scrollable: true
    echo: true
output-location: fragment
---

## Solving problems...

![](https://hutchdatascience.org/Intro_to_R/images/gator_error.jpg)

## Lists

**List** is a **data structure** that stores many elements of various data types, and the order matters.

. . .

You can create a List via the bracket `[ ]` operator:

```{python}
staff = ["chris", "ted", "jeff"]
chrNum = [2, 3, 1, 2, 2]
mixedList = [False, False, False, "A", "B", 92]
```

. . .

How long is a list?

```{python}
len(staff)
```

## Subset to an element of a list

You can access the elements of a list via its "index number", starting at 0.

![](../images/list_subset_0.png){width="200"}

```{python}
chrNum[0]
```

. . .

```{python}
chrNum[2]
```

. . .

Let the fifth element of `chrNum` be the sum of first and second element of `chrNum`:

. . .

```{python}
chrNum[4] = chrNum[0] + chrNum[1]
```

. . .

```{python}
chrNum
```

## Subsetting multiple elements of lists

Suppose you want to access the first three elements of `chrNum`.

```{python}
chrNum
```

. . .

You can use the **slice** operator `:` to specify,

```{python}
chrNum[:3]
```

. . .

The last three elements:

```{python}
chrNum[-3:]
```

. . .

The slice `:` represents the start or the end of the List. We also have negative indicies that help us count backwards.

. . .

Learn more about subsetting lists [in full complexity](https://towardsdatascience.com/the-basics-of-indexing-and-slicing-python-lists-2d12c90a94cf).

## List Methods

**Methods** are functions for a specific data structure, such as a list.

. . .

`chrNum.count(2)` is a method for lists with `chrNum` and 2 as inputs.

. . .

The method returns the number of instances 2 appears as an element of `chrNum`.

. . .

```{python}
chrNum = [2, 3, 1, 2, 2]
```

. . .

```{python}
chrNum.count(2)
```

. . .

```{python}
mixedList
```

. . .

```{python}
mixedList.count(False)
```

. . .

[More examples here](https://hutchdatascience.org/Intro_to_Python/working-with-data-structures.html#objects-in-python).

## Methods vs Functions

**Methods** are for a specific data type and *have to* take in the variable referenced as an input: `chrNum.count(2)` automatically treat `chrNum` as an input.

. . .

**Functions** do not have an implied input: `len(chrNum)` requires specifying a list in the input. Functions are less tied to a data type: `len("hello")` is appropriate for Strings.

. . .

Otherwise, no distinction between the two.

## Objects in Python

In a List, we have explored:

-   *What does it contain* (in terms of data)?

-   *What can it do* (in terms of methods)?

. . .

Such organization is called an **Object**. Pretty much every data type and structure in Python is an object. We will formalize this later.

## Dataframes

A Dataframe is a two-dimensional data structure that is similar to a spreadsheet.

```{python}
import pandas as pd

metadata = pd.read_csv("../classroom_data/metadata.csv")
type(metadata)
```

. . .

Let's investigate the Dataframe as an object:

-   *What does a Dataframe contain (data)?*

    -   the spreadsheet, columns, column names, shape, subsetting

-   *What can a Dataframe do?* *(methods)*

    -   `.head()`, `.tail()`

## What does a Dataframe contain?

Columns

```{python}
metadata.ModelID
metadata['ModelID']
```

. . .

Column names

```{python}
metadata.columns
```

. . .

Shape

```{python}
metadata.shape
```

## Dataframe subsetting

Using [`iloc`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.iloc.html) and bracket operations, you give two slices: one for the row, and one for the column.

```{python}
df = pd.DataFrame(data={'status': ["treated", "untreated", "untreated", "discharged", "treated"],
                            'age_case': [25, 43, 21, 65, 7],
                            'age_control': [49, 20, 32, 25, 32]})
df
```

. . .

Subset to the first 4 rows, first 2 columns:

```{python}
df.iloc[:4, :2]
```

## Dataframe subsetting

If we want a custom slice that is not sequential, we can use an integer list.

Subset the first 3 rows, and the 1st and 3rd column:

```{python}
df.iloc[:3, [0, 2]]
```

## Objects in Python

Formally, an object contains the following:

*What does it contain?*

-   **Value** that holds the essential data for the object.

-   **Attributes** that hold subset of the data or additional data for the object.

*What can it do?*

-   Functions called **Methods** specific to the data type and automatically takes the object as input.

This organizing structure on an object applies to pretty much all Python data types and data structures.

## Lists as an Object

*What does it contain?*

-   **Value**: the contents of the list, such as `[2, 3, 4]`.

-   **Attributes**: subsetting via `[ ]`.

*What can it do (methods)?*

-   `chrNum.count(2)` returns the number of instances 2 appears as an element of `chrNum`.

-   `chrNum.append(4)` appends 4 to the last element of `chrNum`, but does not return anything.

## Dataframe as an Object

*What does it contain?*

-   **Value**: the spreadsheet of data.

-   **Attributes**:

    -   Columns of the data

    -   `.columns`

    -   `.shape`

    -   `.iloc[ , ]` for subsetting

*What can it do (methods)?*

-   `.head()`

-   `.tail()`

## Appendix: Functions and Methods that don't always have an input or output:

| Function call                                                                | What it takes in             | What it does                                                  | Returns                          |
|------------------|------------------|--------------------|------------------|
| [`pow(a, b)`](https://docs.python.org/3/library/functions.html#pow)          | integer `a`, integer `b`     | Raises `a` to the `b`th power.                                | Integer                          |
| [`time.sleep(x)`](https://docs.python.org/3/library/time.html#time.sleep)    | Integer `x`                  | Waits for `x` seconds.                                        | None                             |
| [`dir()`](https://docs.python.org/3/library/functions.html#dir)              | Nothing                      | Gives a list of all the variables defined in the environment. | List                             |
| [`chrNum.append(x)`](https://docs.python.org/3/tutorial/datastructures.html) | list `chrNum`, data type `x` | Appends `x` to the end of the `chrNum`.                       | None (but `chrNum` is modified!) |
| [`chrNum.sort()`](https://docs.python.org/3/tutorial/datastructures.html)    | list `chrNum`                | Sorts `chrNum` by ascending order.                            | None (but `chrNum` is modified!) |
